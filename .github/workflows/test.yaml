name: Test
on:
  workflow_dispatch:
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - main

env:
  TEST_RUNNER_PYTHON_VERSION: 3.9
  TEST_RUNNER_TERRAFORM_VERSION: 1.2.5

jobs:
  list-cloud-functions:
    # Get a list of all the directories within cloud-functions/.
    # This is equivalent to getting a list of all the cloud-functions.
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./cloud-functions
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get install jq
      - id: make-list
        name: Generate list of directories within cloud-functions/
        # use jq to produce json output and filter out the empty item caused by final newline
        run: |
          echo "::set-output name=cloud-functions::$(ls -d */ | jq -R -s -c 'split("\n")[:-1]')"
    outputs:
      cloud-function-dirs: ${{steps.make-list.outputs.cloud-functions}}

  unit-test-python:
    needs: list-cloud-functions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        function-to-test: ${{fromJson(needs.list-cloud-functions.outputs.cloud-function-dirs)}}
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup python ${{env.TEST_RUNNER_PYTHON_VERSION}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{env.TEST_RUNNER_PYTHON_VERSION}}
          cache: pip
      - name: Install Pytest
        run: pip install pytest
      - name: Install dependencies
        working-directory: ./cloud-functions/${{matrix.function-to-test}}
        run: |
          pip install -r requirements.txt
      - name: Run unit tests
        working-directory: ./cloud-functions/${{matrix.function-to-test}}
        run: |
          python -m pytest

  code-check-python:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup python ${{env.TEST_RUNNER_PYTHON_VERSION}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{env.TEST_RUNNER_PYTHON_VERSION}}
          cache: pip
      - name: Install dependencies
        run: |
          pip install -U pip
          pip install black flake8
      - name: Check format (black)
        run: |
          black --check --verbose .
      - name: Check style (flake8)
        run: |
          flake8

  terraform-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/implementation
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.4

      - name: terraform fmt
        run: terraform fmt -check -recursive

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0"
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_ID }}

      - name: Load input variables
        env:
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          REGION: ${{ secrets.REGION }}
          ZONE: ${{ secrets.ZONE }}
        run: |
          echo project_id=\""$PROJECT_ID"\" >> terraform.tfvars
          echo region=\""$REGION"\" >> terraform.tfvars
          echo zone=\""$ZONE"\" >> terraform.tfvars
          echo bucket=\"phdi-tfstate-"$PROJECT_ID"\" >> backend.tfvars

      - name: Set environment
        run: |-
          echo "ENVIRONMENT=$(
          if "${{ github.event.inputs.environment }}"; then
            echo ${{ github.event.inputs.environment }}
          else
            echo dev
          fi
          )" >> $GITHUB_ENV

      - name: terraform init
        run: terraform init -backend-config=backend.tfvars

      - name: terraform workspace
        run: terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}

      - name: terraform validate
        run: terraform validate

      - name: terraform plan
        run: terraform plan
