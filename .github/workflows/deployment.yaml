name: Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        type: environment
        required: true
  push:
    branches:
      - main

jobs:
  deployment:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/implementation
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Check Out Changes
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0"
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_ID }}

      - name: Load input variables
        env:
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          REGION: ${{ secrets.REGION }}
          ZONE: ${{ secrets.ZONE }}
          SMARTY_AUTH_ID: ${{ secrets.SMARTY_AUTH_ID }}
          SMARTY_AUTH_TOKEN: ${{ secrets.SMARTY_AUTH_TOKEN }}
        run: |
          echo project_id=\""$PROJECT_ID"\" >> terraform.tfvars
          echo region=\""$REGION"\" >> terraform.tfvars
          echo zone=\""$ZONE"\" >> terraform.tfvars
          echo smarty_auth_id=\""$SMARTY_AUTH_ID"\" >> terraform.tfvars
          echo smarty_auth_token=\""$SMARTY_AUTH_TOKEN"\" >> terraform.tfvars
          echo bucket=\"phdi-tfstate-"$PROJECT_ID"\" >> backend.tfvars

      - name: Set environment
        run: |-
          echo "ENVIRONMENT=$(
          if "${{ github.event.inputs.environment }}"; then
            echo ${{ github.event.inputs.environment }}
          else
            echo dev
          fi
          )" >> $GITHUB_ENV

      - name: terraform init
        run: terraform init -backend-config=backend.tfvars

      - name: terraform workspace
        run: terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}

      - name: Create artifact registry
        run: terraform apply -target="module.artifact-registries" -auto-approve -lock-timeout=30m

      - name: Log in to artifact registry with docker
        run: gcloud auth configure-docker ${{ secrets.REGION }}-docker.pkg.dev

      - name: Push container images to GCP Artifact Registry
        run: |
          declare -a CONTAINER_IMAGES=("fhir-converter" "phdi-ingestion" "phdi-tabulation")
          for IMAGE in CONTAINER_IMAGES
          do
            PHDI_TAG="ghcr.io/cdcgov/phdi/${ IMAGE }:main"
            echo $PHDI_TAG
            GCP_TAG="${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/phdi-${{ env.ENVIRONMENT }}-repository/$IMAGE:latest"
            docker pull $PHDI_TAG
            docker tag $PHDI_TAG $GCP_TAG
            docker push $GCP_TAG
          done

      - name: terraform apply
        run: terraform apply -auto-approve -lock-timeout=30m
